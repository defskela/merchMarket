basePath: /api
definitions:
  handlers.AuthRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handlers.AuthResponse:
    properties:
      token:
        type: string
    type: object
  handlers.CoinHistory:
    properties:
      received:
        items:
          $ref: '#/definitions/handlers.CoinHistoryEntry'
        type: array
      sent:
        items:
          $ref: '#/definitions/handlers.CoinHistoryEntry'
        type: array
    type: object
  handlers.CoinHistoryEntry:
    properties:
      amount:
        type: integer
      fromUser:
        type: string
      toUser:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.InfoResponse:
    properties:
      coinHistory:
        $ref: '#/definitions/handlers.CoinHistory'
      coins:
        type: integer
      inventory:
        items:
          $ref: '#/definitions/handlers.InventoryItem'
        type: array
    type: object
  handlers.InventoryItem:
    properties:
      quantity:
        type: integer
      type:
        type: string
    type: object
  handlers.SendCoinRequest:
    properties:
      amount:
        type: integer
      toUser:
        type: string
    required:
    - amount
    - toUser
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для отбора на Стажировку в Авито
  title: API Avito shop
  version: 1.0.0
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя или авторизует существующего.
        Возвращает JWT-токен.
      parameters:
      - description: Логин и пароль
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация.
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Аутентификация и получение JWT-токена.
      tags:
      - Auth
  /buy/{item}:
    get:
      description: Списывает монеты и добавляет предмет в инвентарь.
      parameters:
      - description: Название товара
        in: path
        name: item
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ
          schema:
            type: "null"
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Купить предмет за монеты.
      tags:
      - Merch
  /info:
    get:
      description: Возвращает баланс монет, инвентарь и список транзакций.
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ.
          schema:
            $ref: '#/definitions/handlers.InfoResponse'
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить информацию о монетах, инвентаре и истории транзакций.
      tags:
      - Info
  /sendCoin:
    post:
      consumes:
      - application/json
      description: Передаёт монеты от авторизованного пользователя другому.
      parameters:
      - description: Данные отправки монет
        in: body
        name: sendCoin
        required: true
        schema:
          $ref: '#/definitions/handlers.SendCoinRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ.
          schema:
            type: "null"
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Отправить монеты другому пользователю.
      tags:
      - Wallet
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
